#!/usr/bin/env python3

from sys import argv
import os
import fnmatch
import yaml
import shutil
import subprocess

from colorama import Fore, Style

HOME_DIR = os.environ["HOME"]
USERPROFILE_FILE = ".userprofile"
USERALIASES_FILE = ".useraliases"
AUTO_GENERATED_PREFIX_LINE = "# automatically generated by dotfiles ({})\n"
PRINT_ADDING_CONTENT = "adding content of {} to {}\n"

# dot.yml keys
KEY_BACKUP = "backup"
KEY_CONFIG = "config"
KEY_DEST = "dest"
KEY_DIRECTORIES = "directories"
KEY_EXTRA_FILES = "extra_files"
KEY_EXTRA_FILES_NAME = "name"
KEY_EXTRA_FILES_DEST = "dest"
KEY_ENV_VARS = "env_vars"
KEY_ENV_VARS_NAME = "name"
KEY_ENV_VARS_VALUE = "value"
KEY_FILES = "files"
KEY_PRE_SHELL_COMMANDS = "pre_shell_commands"
KEY_SHELL_COMMANDS = "shell_commands"

def printColoredName(fore: Fore, name: str):
    return fore + name + Style.RESET_ALL

def dotName(name: str):
    return printColoredName(Fore.MAGENTA, name)

def pathName(name: str):
    return printColoredName(Fore.GREEN, name)

def dirName(name: str):
    return printColoredName(Fore.BLUE, name)

def fileName(name: str):
    return printColoredName(Fore.CYAN, name)

def envName(name: str):
    return printColoredName(Fore.CYAN, name)

def commandName(name: str):
    return printColoredName(Fore.YELLOW, name)

def find_yml(dir):
    # List to store directories containing the .yml file
    dirs_with_yml = []

    # Walk through the directory tree
    for root, _, files in os.walk(dir):
        # Check if any .yml file is in the current directory
        if any(fnmatch.fnmatch(file, "dot.yml") for file in files):
            dirs_with_yml.append(root)

    return len(dirs_with_yml) != 0

def create_dest(dest: str, backup: bool):
    if os.path.exists(dest):
        if backup:
            print("config directory already exists:", dest)
            i = 1
            backup_dir = dest + ".back." + str(i)
            while os.path.exists(backup_dir):
                print("backup already exists:", backup_dir)
                i = i + 1
                backup_dir = dest + ".back." + str(i)
            print ("creating backup:", pathName(backup_dir))
            shutil.copytree(dest, backup_dir)
    else:
        print("creating directory:", pathName(dest))
        os.makedirs(dest)

def install(dir: str):
    print("installing:", dotName(dir))

    # Copy optional .userprofile
    if USERPROFILE_FILE in os.listdir(dir):
        home_userprofile = os.path.join(HOME_DIR, USERPROFILE_FILE)
        print(PRINT_ADDING_CONTENT.format(fileName(USERPROFILE_FILE), pathName(home_userprofile)))
        with open(os.path.join(dir, USERPROFILE_FILE), "r") as f_source:
            content = f_source.read()
            with open(os.path.join(HOME_DIR, USERPROFILE_FILE), "a") as f_dest:
                f_dest.write(AUTO_GENERATED_PREFIX_LINE.format(dir) + content + "\n")

    # Copy optional .useraliases
    if USERALIASES_FILE in os.listdir(dir):
        home_useraliases = os.path.join(HOME_DIR, USERALIASES_FILE)
        print(PRINT_ADDING_CONTENT.format(fileName(USERALIASES_FILE), pathName(home_useraliases)))
        with open(os.path.join(dir, USERALIASES_FILE), "r") as f_source:
            content = f_source.read()
            with open(os.path.join(HOME_DIR, USERALIASES_FILE), "a") as f_dest:
                f_dest.write(AUTO_GENERATED_PREFIX_LINE.format(dir) + content + "\n")

    if not find_yml(dir):
        return

    yml_path = os.path.join(dir, "dot.yml")
    with open(yml_path, "r") as f:
        content = f.read()
        yml = yaml.load(content, Loader=yaml.CLoader)
        config = yml[KEY_CONFIG]

        # Execute pre shell commands first
        if KEY_PRE_SHELL_COMMANDS in config:
            pre_shell_commands = config[KEY_PRE_SHELL_COMMANDS]
            for pre_shell_command in pre_shell_commands:
                print("executing", KEY_PRE_SHELL_COMMANDS, commandName(pre_shell_command))
                subprocess.run(pre_shell_command, shell=True)

        # if dest is $HOME, only copy files to home directory
        if config[KEY_DEST] == "$HOME":
            dest = HOME_DIR
        else:
            dest = os.path.expandvars(config[KEY_DEST])

            backup = True
            if KEY_BACKUP in config and config[KEY_BACKUP] == False:
                backup = False

            create_dest(dest, backup)

        # Copy files
        if KEY_FILES in config:
            files = config[KEY_FILES]
            for file in files:
                print("copying file", fileName(file), "to", pathName(dest))
                shutil.copy(os.path.join(dir, file), dest)

        # Copy directories
        if KEY_DIRECTORIES in config:
            directories = config[KEY_DIRECTORIES]
            for directory in directories:
                print("copying directory", dirName(directory), "to", pathName(dest))
                basename = os.path.basename(directory)
                destination_dir = os.path.join(dest, basename)
                shutil.copytree(os.path.join(dir, directory), destination_dir, dirs_exist_ok=True)

        # Copy extra files
        if KEY_EXTRA_FILES in config:
            extra_files = config[KEY_EXTRA_FILES]
            for extra_file in extra_files:
                extra_file_name = extra_file[KEY_EXTRA_FILES_NAME]
                extra_file_dest = os.path.expandvars(extra_file[KEY_EXTRA_FILES_DEST])
                print("copying extra file", fileName(extra_file_name), "to", pathName(extra_file_dest))
                shutil.copy(os.path.join(dir, extra_file_name), extra_file_dest)

        # Write env variables
        if KEY_ENV_VARS in config:
            env_vars = config[KEY_ENV_VARS]
            env_var_file = os.path.join(os.path.expandvars("$HOME"), USERPROFILE_FILE)
            with open(env_var_file, "a") as f:
                f.write(AUTO_GENERATED_PREFIX_LINE.format(dir))
                for env_var_dict in env_vars:
                    name = env_var_dict[KEY_ENV_VARS_NAME]
                    value = env_var_dict[KEY_ENV_VARS_VALUE]
                    print("writing env var", envName(name), "to", pathName(env_var_file))
                    f.write("export {}=\"{}\"\n".format(name, value))
                f.write("\n")

        # Execute commands
        if KEY_SHELL_COMMANDS in config:
            shell_commands = config[KEY_SHELL_COMMANDS]
            for shell_command in shell_commands:
                print("executing shell command", commandName(shell_command))
                subprocess.run(shell_command, shell=True)

        print()

def main():
    if len(argv) < 2:
        print("installing all dotfiles")
        # install for all directories that contain dot.yml file
        for path in os.listdir("."):
            install(path)
    else:
        dots = argv[1:]
        for dot in dots:
            install(dot)

try:
    main()
except Exception as e:
    print("Error:", e)
    print("Usage: install_dots.py [<directory1> <directory2> ...]")
